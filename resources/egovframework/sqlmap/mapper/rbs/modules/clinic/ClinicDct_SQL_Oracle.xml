<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
            "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	1. ${targetTableIdx}, ${targetTable}, [목록에 사용할 컬럼], [기본정렬쿼리], 테이블명 등 변경해서 사용
	2. 그 외 필요에 따라 쿼리 수정하여 사용 
-->
<mapper namespace="rbs.modules.clinic.clinicDctMapper">
	
	<!-- KEY가 INT인 경우 -->
	<select id="nextId" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT <trim><include refid="rbs.commonDBMSMapper.nullFn"/>(MAX(${targetTableIdx}), 0)</trim> + 1 MAXID
		FROM 
		${targetTable} A
	</select>
	<!-- KEY가 STRING인 경우 - KEY형식에 맞게 변경하여 사용 
	<select id="nextId" parameterType="java.util.HashMap" resultType="java.lang.String">
		SELECT <include refid="rbs.commonDBMSMapper.currentDateYYYYMM"/> || LPAD(TO_NUMBER(SUBSTR(NVL(MAX(A.${targetTableIdx}), <include refid="rbs.commonDBMSMapper.currentDateYYYYMM"/> || '0'), 7)) + 1, 4, '0') MAXID
		FROM 
		${targetTable} A 
		WHERE A.${targetTableIdx} LIKE <include refid="rbs.commonDBMSMapper.currentDateYYYYMM"/> || '%'
	</select>
	-->
	<!-- 특정 테이블 IDX의 max 값 가져오기 -->
	<select id="selectMaxIdx" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT 
			MAX(${targetTableIdx})
		FROM 
			${targetTable} A
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
	</select>
	
	<!-- 수정/삭제 권한 : 등록자 -->
    <!-- 목록 수정/삭제 권한 조건 쿼리 -->
	<sql id="editAuthListQuery">
		<if test="AUTH_MEMBER_IDX != null">
		, CASE WHEN A.REGI_IDX = #{AUTH_MEMBER_IDX} THEN '1' ELSE '0' END AS AUTH_MNG
		</if>
	</sql>
	
    <!-- 수정/삭제 권한 조건 쿼리 -->	
	<sql id="editAuthWhereQuery">
		<if test="AUTH_MEMBER_IDX != null">
		AND A.REGI_IDX = #{AUTH_MEMBER_IDX} 
		</if>
	</sql>
	<!-- 기업 자가 확인 체크리스트 목록 가져오기 -->
	<select id="selectCheckList" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT *
		FROM 
			HRD_CLI_CHECKLIST
		WHERE 
			ISDELETE = '0'
		ORDER BY CHKLST_NO
	</select>
	<!-- 기업 자가 확인 체크리스트 답변 목록 가져오기 -->
	<select id="selectCheckListAnswer" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT *
		FROM 
			HRD_CLI_CHECKLIST_ANSWER A
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
		ORDER BY CHKLST_NO
	</select>
	
	<!-- 기업 선정 심사표 목록 가져오기 -->
	<select id="selectJdgmntabList" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT *
		FROM 
			HRD_CLI_JDGMNTAB
		WHERE 
			ISDELETE = '0'
		ORDER BY JDGMNTAB_NO
	</select>
	<!-- 기업 선정 심사표 답변 목록 가져오기 -->
	<select id="selectJdgmntabListAnswer" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT *
		FROM 
			HRD_CLI_JDGMNTAB_ANSWER A
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
		ORDER BY JDGMNTAB_NO
	</select>
	
	<select id="selectReqList" parameterType="java.util.HashMap" resultType="dataMap">
		<include refid="rbs.commonDBMSMapper.PAGING_TOP"/>
			SELECT 
				(SELECT 
					D.BPL_NM 
				 FROM
				    HRD_BSK D 
				 WHERE 
				    B.BPL_NO = D.BPL_NO) 
				AS BPL_NM,
				(SELECT
					INSTT_NAME
				 FROM
				 	HRD_COM_INSTT
				 WHERE
				 	INSTT_IDX = B.CLI_INSTT_IDX)
				AS INSTT_NAME,
				A.*,
				B.BPL_NO AS BPL_NO,
				B.DOCTOR_IDX AS DOCTOR_IDX,
				B.CLI_INSTT_IDX
			FROM 
				${targetTable} A, HRD_CLI B
			<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
				AND A.CONFM_STATUS NOT IN ('5','20') /*임시저장(5), 회수(20)는 주치의가 보는 신청 목록에서 제외한다*/
				AND A.CLI_IDX = B.CLI_IDX
	        	AND B.ISDELETE = '0'
	        	AND (B.VALID_END_DATE IS NULL OR TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[<=]]> B.VALID_END_DATE)
	        <if test="ISHEAD == null">
				AND B.CLI_INSTT_IDX = #{INSTT_IDX}
			</if>
			ORDER BY 
				A.CONFM_STATUS, A.REGI_DATE DESC 
			<include refid="rbs.commonMapper.COM_ORDER"/>
		<include refid="rbs.commonDBMSMapper.PAGING_BOTTOM"/>
	</select>
	
	<select id="selectReqListForDoctor" parameterType="java.util.HashMap" resultType="dataMap">
		<include refid="rbs.commonDBMSMapper.PAGING_TOP"/>
			 /*로그인한 회원이 전담주치의인 기업*/
			SELECT * FROM 
			(SELECT 
				A.*, 
				(SELECT BPL_NM FROM HRD_BSK WHERE BPL_NO = B.BPL_NO) AS BPL_NM,
				(SELECT INSTT_NAME FROM HRD_COM_INSTT WHERE INSTT_IDX = B.CLI_INSTT_IDX) AS INSTT_NAME, 
				B.BPL_NO AS BPL_NO,
				B.DOCTOR_IDX AS DOCTOR_IDX,
				B.CLI_INSTT_IDX
			FROM 
				HRD_CLI_REQ A, HRD_CLI B
				WHERE B.DOCTOR_IDX = #{DOCTOR_IDX}
				AND A.CLI_IDX = B.CLI_IDX
				AND A.CONFM_STATUS NOT IN ('5','20') 
				AND (B.VALID_END_DATE IS NULL OR TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[<=]]> B.VALID_END_DATE)
			UNION
			/*로그인한 회원이 주치의로 배정된 기업*/
			SELECT 
				A.*, 
				(SELECT BPL_NM FROM HRD_BSK WHERE BPL_NO = B.BPL_NO) AS BPL_NM,
				(SELECT C.INSTT_NAME FROM HRD_COM_INSTT C, HRD_BSK_PSITN_INSTT D WHERE D.BPL_NO = B.BPL_NO AND C.INSTT_IDX = D.INSTT_IDX AND D.APPLY_YN = 'Y') AS INSTT_NAME, 
				B.BPL_NO AS BPL_NO,
				(SELECT DOCTOR_IDX FROM HRD_CLI C WHERE C.CLI_IDX = A.CLI_IDX) AS DOCTOR_IDX,
				(SELECT CLI_INSTT_IDX FROM HRD_CLI C WHERE C.CLI_IDX = A.CLI_IDX) AS CLI_INSTT_IDX
			FROM 
				HRD_CLI_REQ A, HRD_COM_DOCTOR_CORP B			
				WHERE B.BPL_NO IN (SELECT BPL_NO FROM HRD_CLI WHERE CLI_IDX = A.CLI_IDX AND REQ_IDX = A.REQ_IDX AND DOCTOR_IDX IS NULL)
				AND B.DOCTOR_IDX = #{DOCTOR_IDX}
				AND A.CONFM_STATUS NOT IN ('5','20')
			<include refid="rbs.commonMapper.COM_ORDER"/>
			) A <include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
		<include refid="rbs.commonDBMSMapper.PAGING_BOTTOM"/>
	</select>
	
	<select id="selectList" parameterType="java.util.HashMap" resultType="dataMap">
		<include refid="rbs.commonDBMSMapper.PAGING_TOP"/>
			SELECT 
				(SELECT 
					D.BPL_NM 
				 FROM
				    HRD_BSK D 
				 WHERE 
				    D.BPL_NO = B.BPL_NO) 
				AS BPL_NM,
				A.*,
				B.BPL_NO AS BPL_NO,
				FN_GET_DOCTOR_NAME(B.DOCTOR_IDX) AS DOCTOR_NAME,
				TO_CHAR(SYSDATE,'YYYY') - SUBSTR(B.VALID_START_DATE, 0, 4) + 1 AS YEARLY
			FROM 
				${targetTable} A, HRD_CLI B
			<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
				<if test="YEAR != null">
					AND (TO_CHAR(SYSDATE,'YYYY') - SUBSTR(B.VALID_START_DATE, 0, 4) + 1) = #{YEAR}
				</if>
				AND A.CONFM_STATUS NOT IN ('5','20') /*임시저장(5), 회수(20)는 주치의가 보는 신청 목록에서 제외한다*/
				AND A.CLI_IDX = B.CLI_IDX
	        	AND B.ISDELETE = '0'
	        	AND TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[<=]]> B.VALID_END_DATE
	        <if test="ISHEAD == null">
				AND B.CLI_INSTT_IDX = #{INSTT_IDX}
			</if>
			ORDER BY
				A.CONFM_STATUS, A.REGI_DATE DESC 
			<include refid="rbs.commonMapper.COM_ORDER"/>
		<include refid="rbs.commonDBMSMapper.PAGING_BOTTOM"/>
	</select>
	
	<select id="selectListForDoctor" parameterType="java.util.HashMap" resultType="dataMap">
		<include refid="rbs.commonDBMSMapper.PAGING_TOP"/>
			SELECT 
				(SELECT 
					D.BPL_NM 
				 FROM
				    HRD_BSK D 
				 WHERE 
				    D.BPL_NO = B.BPL_NO) 
				AS BPL_NM,
				A.*,
				B.BPL_NO AS BPL_NO,
				FN_GET_DOCTOR_NAME(B.DOCTOR_IDX) AS DOCTOR_NAME,
				TO_CHAR(SYSDATE,'YYYY') - SUBSTR(B.VALID_START_DATE, 0, 4) + 1 AS YEARLY
			FROM 
				${targetTable} A, HRD_CLI B
			<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
				<if test="YEAR != null">
					AND (TO_CHAR(SYSDATE,'YYYY') - SUBSTR(B.VALID_START_DATE, 0, 4) + 1) = #{YEAR}
				</if>
				AND A.CONFM_STATUS NOT IN ('5','20') /*임시저장(5), 회수(20)는 주치의가 보는 신청 목록에서 제외한다*/
				AND A.CLI_IDX = B.CLI_IDX
	        	AND B.ISDELETE = '0'
				AND B.DOCTOR_IDX = #{DOCTOR_IDX}
				AND TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[<=]]> B.VALID_END_DATE
			ORDER BY 
				A.CONFM_STATUS, A.REGI_DATE DESC 
			<include refid="rbs.commonMapper.COM_ORDER"/>
		<include refid="rbs.commonDBMSMapper.PAGING_BOTTOM"/>
	</select>

	<select id="selectReqCount" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT COUNT(1) CNT
		FROM 
			(
	            SELECT 
				(SELECT 
					D.BPL_NM 
				 FROM 
				 	HRD_BSK D 
				 WHERE 
				    B.BPL_NO = D.BPL_NO) 
				AS BPL_NM,
				A.*
				FROM 
				${targetTable} A, HRD_CLI B
				<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
				AND A.CONFM_STATUS NOT IN ('5','20') /*임시저장(5), 회수(20)는 주치의가 보는 신청 목록에서 제외한다*/
				AND A.CLI_IDX = B.CLI_IDX
		        AND B.ISDELETE = '0'
		        AND (B.VALID_END_DATE IS NULL OR TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[<=]]> B.VALID_END_DATE)
		        <if test="ISHEAD == null">
					AND B.CLI_INSTT_IDX = #{INSTT_IDX}
		        </if>
			)
	</select>
	
	<select id="selectReqCountForDoctor" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT COUNT(1) CNT
		FROM 
			(
				SELECT * FROM(
	            /*로그인한 회원이 전담주치의인 기업*/				
					SELECT
					(SELECT BPL_NM FROM HRD_BSK WHERE BPL_NO = B.BPL_NO) AS BPL_NM,
					A.*
				FROM 
					HRD_CLI_REQ A, HRD_CLI B				
					WHERE B.DOCTOR_IDX = #{DOCTOR_IDX}
					AND A.CLI_IDX = B.CLI_IDX
					AND A.CONFM_STATUS NOT IN ('5','20') 
					AND (B.VALID_END_DATE IS NULL OR TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[<=]]> B.VALID_END_DATE)
				UNION
				/*로그인한 회원이 주치의로 배정된 기업*/
				SELECT 
					(SELECT BPL_NM FROM HRD_BSK WHERE BPL_NO = B.BPL_NO) AS BPL_NM,
					A.*
				FROM 
					HRD_CLI_REQ A, HRD_COM_DOCTOR_CORP B				
					WHERE B.BPL_NO IN (SELECT BPL_NO FROM HRD_CLI WHERE CLI_IDX = A.CLI_IDX AND REQ_IDX = A.REQ_IDX AND DOCTOR_IDX IS NULL)
					AND B.DOCTOR_IDX = #{DOCTOR_IDX}
					AND A.CONFM_STATUS NOT IN ('5','20')
					) A
			) A
			<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
	</select>
	
	<select id="selectCount" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT COUNT(1) CNT
		FROM 
			(
	            SELECT 
					A.*
				FROM 
					${targetTable} A, HRD_CLI B
				<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
					<if test="YEAR != null">
						AND (TO_CHAR(SYSDATE,'YYYY') - SUBSTR(B.VALID_START_DATE, 0, 4) + 1) = #{YEAR}
					</if>
					AND A.CONFM_STATUS NOT IN ('5','20') /*임시저장(5), 회수(20)는 주치의가 보는 신청 목록에서 제외한다*/
					AND A.CLI_IDX = B.CLI_IDX
		        	AND B.ISDELETE = '0'
		        	AND TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[<=]]> B.VALID_END_DATE
		        <if test="ISHEAD == null">
					AND B.CLI_INSTT_IDX = #{INSTT_IDX}
				</if>
			)
	</select>
	
	<select id="selectCountForDoctor" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT COUNT(1) CNT
		FROM 
			(
	            SELECT 
					A.*
				FROM 
					${targetTable} A, HRD_CLI B
				<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
					<if test="YEAR != null">
						AND (TO_CHAR(SYSDATE,'YYYY') - SUBSTR(B.VALID_START_DATE, 0, 4) + 1) = #{YEAR}
					</if>
					AND A.CONFM_STATUS NOT IN ('5','20') /*임시저장(5), 회수(20)는 주치의가 보는 신청 목록에서 제외한다*/
					AND A.CLI_IDX = B.CLI_IDX
		       		AND B.ISDELETE = '0'
					AND B.DOCTOR_IDX = #{DOCTOR_IDX}
					AND TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[<=]]> B.VALID_END_DATE
			)
	</select>
	
	<select id="selectCountForHeadQuarter" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT COUNT(1) CNT
		FROM 
			${targetTable} A
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
		AND TO_CHAR(SYSDATE, 'YYYYMMDD') <![CDATA[>]]> B.VALID_END_DATE
	</select>
	
	<select id="selectView" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT 	
			<if test='targetTable == "HRD_CLI_SPT"'>
				PKG_DGUARD.FN_DEC_ACNUTNO(A.ACNUTNO)  AS ACNUTNO,		
			</if>
			<if test='targetTable == "HRD_CLI_REQ"'>
				PKG_DGUARD.FN_DEC_TELNO(A.TELNO) AS TELNO,
			</if>
			A.*
		FROM 
		${targetTable} A
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
	</select>
	
	<select id="selectReqView" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT
			<if test='targetTable == "HRD_CLI_REQ"'>
				PKG_DGUARD.FN_DEC_TELNO(A.TELNO) AS TELNO,
			</if>	
			A.*, B.*
		FROM 
		${targetTable} A, HRD_CLI B 
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
		AND A.CLI_IDX = B.CLI_IDX
	</select>
	<select id="selectFileList" parameterType="java.util.HashMap" resultType="dataMap">
			SELECT 
			<foreach collection="columnList" item="columnItem" index="i" separator=",">
				${columnItem}
			</foreach>
			FROM 
			${targetTable} A 
			<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
	</select>
	<select id="selectFileView" parameterType="java.util.HashMap" resultType="dataMap">
			SELECT 
			A.${columnItem}_SAVED_NAME, A.${columnItem}_ORIGIN_NAME
			FROM 
			${targetTable} A 
			<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
	</select>
	
	<update id="updateFileDown" parameterType="java.util.HashMap">
		UPDATE ${targetTable} SET ${FILE_COLUMN}_DCNT = ${FILE_COLUMN}_DCNT + 1 
		WHERE ${targetTableIdx} = #{KEY_IDX}
	</update>
	
	<select id="authCount" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT COUNT(1) CNT
		FROM 
		${targetTable} A
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
		<include refid="editAuthWhereQuery"/>
	</select>
	
	<select id="selectModify" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT 
		<if test='targetTable == "HRD_CLI_SPT"'>
			PKG_DGUARD.FN_DEC_ACNUTNO(A.ACNUTNO)  AS ACNUTNO,		
		</if>
		<if test='targetTable == "HRD_CLI_REQ"'>
			PKG_DGUARD.FN_DEC_TELNO(A.TELNO) AS TELNO,
		</if>
		A.* 
		FROM 
		${targetTable} A 
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
	</select>
	
	<select id="selectReqModify" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT 
			<if test='targetTable == "HRD_CLI_REQ"'>
				PKG_DGUARD.FN_DEC_TELNO(A.TELNO) AS TELNO,
			</if>	
			A.*, B.*
		FROM 
		${targetTable} A, HRD_CLI B 
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
		AND A.CLI_IDX = B.CLI_IDX
	</select>
	
	<insert id="insert" parameterType="java.util.HashMap">
		INSERT INTO ${targetTable} (
			<include refid="rbs.commonMapper.INSERT_COLUMNS"/>
			, REGI_DATE, LAST_MODI_DATE
		) VALUES (
			<include refid="rbs.commonMapper.INSERT_VALUES"/>
			, <include refid="rbs.commonDBMSMapper.currentDate"/>, <include refid="rbs.commonDBMSMapper.currentDate"/>
		)
	</insert>
	
	<insert id="insertConfm" parameterType="java.util.HashMap">
		INSERT INTO ${targetTable} (
			<include refid="rbs.commonMapper.INSERT_COLUMNS"/>
			, REGI_DATE
		) VALUES (
			<include refid="rbs.commonMapper.INSERT_VALUES"/>
			, <include refid="rbs.commonDBMSMapper.currentDate"/>
		)
	</insert>
	
	<update id="update" parameterType="java.util.HashMap">
		UPDATE ${targetTable} SET LAST_MODI_DATE = <include refid="rbs.commonDBMSMapper.currentDate"/>
		<include refid="rbs.commonDBMSMapper.UPDATE_ADD_SET"/>
		<include refid="rbs.commonMapper.COM_SG_WHERE"/>
	</update>
	
	<select id="deleteList" parameterType="java.util.HashMap" resultType="dataMap">
		<include refid="rbs.commonDBMSMapper.PAGING_TOP"/>
			SELECT 
			A.*
			FROM 
			${targetTable} A 
			<include refid="rbs.commonMapper.SELECT_DT_WHERE"/>
			ORDER BY ${targetTableIdx}
		<include refid="rbs.commonDBMSMapper.PAGING_BOTTOM"/>
	</select>
	
	<select id="deleteCount" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT COUNT(1) CNT
		FROM 
		${targetTable} A
		<include refid="rbs.commonMapper.SELECT_DT_WHERE"/>
	</select>
	
	<update id="delete" parameterType="java.util.HashMap">
		UPDATE ${targetTable} SET ISDELETE = '1', LAST_MODI_DATE = <include refid="rbs.commonDBMSMapper.currentDate"/>  
		<include refid="rbs.commonDBMSMapper.UPDATE_ADD_SET"/>
		<include refid="rbs.commonMapper.COM_SG_WHERE"/>
	</update>
	
	<update id="restore" parameterType="java.util.HashMap">
		UPDATE ${targetTable} SET ISDELETE = '0', LAST_MODI_DATE = <include refid="rbs.commonDBMSMapper.currentDate"/>  
		<include refid="rbs.commonDBMSMapper.UPDATE_ADD_SET"/>
		<include refid="rbs.commonMapper.COM_SG_WHERE"/>
	</update>
	
	<delete id="cdelete" parameterType="java.util.HashMap">
		DELETE FROM ${targetTable}  
		<include refid="rbs.commonMapper.COM_SG_WHERE"/>
	</delete>
	
	<!-- BPL_NO에 해당하는 CLI_IDX의 MAX값 select -->
	<select id="selectMaxCliIdx" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT NVL(MAX(CLI_IDX),0) AS CLI_IDX
		FROM 
		HRD_CLI A
		  WHERE A.BPL_NO = #{BPL_NO}
	</select>
	
	<select id="selectDoctorList" parameterType="java.util.HashMap" resultType="dataMap">		
		SELECT 
            B.MEMBER_NAME AS DOCTOR_NAME,
		    C.INSTT_NAME,
		    A.* 
		FROM 
			HRD_COM_DOCTOR A
			INNER JOIN VIEW_HRD_DOCTOR B ON A.MEMBER_IDX = B.MEMBER_IDX
    		INNER JOIN HRD_COM_INSTT C ON A.INSTT_IDX = C.INSTT_IDX
		WHERE 
			A.ISDELETE = '0'
		<if test="ISHEAD == null">
			AND	A.INSTT_IDX = #{INSTT_IDX}
		</if>
			AND A.APPLY_YN = 'Y'
           
	</select>
	
	<select id="selectDoctorCount" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT COUNT(1)
		FROM
			HRD_COM_DOCTOR A
			INNER JOIN VIEW_HRD_DOCTOR B ON A.MEMBER_IDX = B.MEMBER_IDX
    		INNER JOIN HRD_COM_INSTT C ON A.INSTT_IDX = C.INSTT_IDX
		WHERE 
			A.ISDELETE = '0'
		<if test="ISHEAD == null">
			AND	A.INSTT_IDX = #{INSTT_IDX}
		</if>
			AND A.APPLY_YN = 'Y'
        	AND A.ISDELETE = '0'
	</select>
	
	<!-- LDG 능력개발클리닉 참여 신청서 기업정보 select -->
	<select id="selectCorpInfo" parameterType="java.util.HashMap" resultType="dataMap">		
			SELECT 
			A.BPL_NM,
			A.BPL_NO,
            (SELECT INSTT_IDX FROM HRD_BSK_PSITN_INSTT WHERE BPL_NO = A.BPL_NO AND APPLY_YN = 'Y') AS INSTT_IDX,
			A.BIZR_NO,
			A.INDUTY_CD,
			CASE WHEN 
            B.NAME IS NOT NULL AND B.LCLAS_NM IS NOT NULL 
            THEN B.NAME || ' / ' || B.LCLAS_NM 
            ELSE UNISTR('') END AS INDUTY_NM,  
			A.TOT_WORK_CNT,
			A.BPL_ADDR || ' ' || ADDR_DTL AS BPL_ADDR
			FROM
			HRD_BSK A 
            LEFT JOIN
            TMP_INDUSTRY_LIMIT B
            ON A.INDUTY_CD = B.CODE
            WHERE A.BPL_NO = #{BPL_NO}
	</select>
	
	
	<!-- 훈련계획서 최종 승인시 PLAN에서 PLAN_CHAGE테이블로 일괄 인서트 한다-->
	<update id="PlanToChange" parameterType="java.util.HashMap">
		{call
		        DECLARE
		        v_CHG_IDX NUMBER;
		        v_CLI_IDX NUMBER;
		        v_PLAN_IDX NUMBER;
		        BEGIN
		            v_CLI_IDX := #{CLI_IDX};
		            v_PLAN_IDX := #{PLAN_IDX};
		        
		            SELECT NVL(MAX(CHG_IDX),0) + 1
		            INTO v_CHG_IDX 
		            FROM HRD_CLI_PLAN_CHANGE
		            WHERE 
		                CLI_IDX = v_CLI_IDX
		            AND PLAN_IDX = v_PLAN_IDX;
		            
		        /*HRD_CLI_PLAN TO HRD_CLI_PLAN_CHANGE*/
		        INSERT INTO HRD_CLI_PLAN_CHANGE
		        select A.CLI_IDX,
		        A.PLAN_IDX,
		        v_CHG_IDX AS CHG_IDX,
		        A.PLAN_NM,
		        A.HRD_PIC_ABLTDEVLP_PLAN,
		        A.SLFTR_PLAN,
		        A.FYER_TR_PLAN_TR_DTY,
		        A.GVRN_SPORT_CRSE_CO,
		        A.GVRN_UN_SPORT_CRSE_CO,
		        A.SLFTR_SFDGSPSCDG_OPRPRENGER_CO,
		        A.SLFTR_SFDGSPSCDG_OPRCRSE_CO,
		        A.SLFTR_SPAPPLCDG_OPRREARNGER_CO,
		        A.SLFTR_SPAPPLCDG_OPRCRSE_CO,
		        A.CONFM_STATUS,
		        A.DOCTOR_OPINION,
		        A.ISDELETE,
		        A.REGI_IDX,
		        A.REGI_ID,
		        A.REGI_NAME,
		        A.REGI_DATE,
		        A.REGI_IP,
		        A.LAST_MODI_IDX,
		        A.LAST_MODI_ID,
		        A.LAST_MODI_NAME,
		        A.LAST_MODI_DATE,
		        A.LAST_MODI_IP 
		        from hrd_cli_plan A
		        WHERE A.CLI_IDX = v_CLI_IDX
		        AND A.PLAN_IDX = v_PLAN_IDX;
		        
		        /*HRD_CLI_PLAN_TR_SUB TO HRD_CLI_PLAN_CHANGE_TR_SUB*/
		        INSERT INTO HRD_CLI_PLAN_CHANGE_TR_SUB
		        SELECT A.CLI_IDX,
		        A.PLAN_IDX,
		        v_CHG_IDX AS CHG_IDX,
		        A.TR_DTL_IDX,
		        A.TR_MT,
		        A.TR_TRGET,
		        A.TR_CN,
		        A.TR_MBY,
		        A.TR_MTH,
		        A.TRINSTT_NM,
		        A.TR_NMPR,
		        A.TRTM,
		        A.GVRN_SPORT_YN,
		        A.REMARKS,
		        A.REGI_IDX,
		        A.REGI_ID,
		        A.REGI_NAME,
		        A.REGI_DATE,
		        A.REGI_IP,
		        A.LAST_MODI_IDX,
		        A.LAST_MODI_ID,
		        A.LAST_MODI_NAME,
		        A.LAST_MODI_DATE,
		        A.LAST_MODI_IP
		        FROM HRD_CLI_PLAN_TR_SUB A
		        WHERE 
		            CLI_IDX = v_CLI_IDX
		        AND PLAN_IDX = v_PLAN_IDX;
		        
		        /*HRD_CLI_PLAN_SUB TO HRD_CLI_PLAN_CHANGE_SUB*/
		        INSERT INTO HRD_CLI_PLAN_CHANGE_SUB
		        SELECT A.CLI_IDX,
		        A.PLAN_IDX,
		        v_CHG_IDX AS CHG_IDX,
		        A.SPORT_ITEM_CD,
		        A.ESSNTL_SE,
		        A.REQST_YN,
		        A.PLAN_CN,
		        A.ISDELETE,
		        A.REGI_IDX,
		        A.REGI_ID,
		        A.REGI_NAME,
		        A.REGI_DATE,
		        A.REGI_IP,
		        A.LAST_MODI_IDX,
		        A.LAST_MODI_ID,
		        A.LAST_MODI_NAME,
		        A.LAST_MODI_DATE,
		        A.LAST_MODI_IP
		        FROM HRD_CLI_PLAN_SUB A
		        WHERE 
		            CLI_IDX = v_CLI_IDX
		        AND PLAN_IDX = v_PLAN_IDX;
		        
		        
		        /*HRD_CLI_PLAN_KPI TO HRD_CLI_PLAN_CHANGE_KPI*/
		        INSERT INTO HRD_CLI_PLAN_CHANGE_KPI
		        SELECT A.CLI_IDX,
		        A.PLAN_IDX,
		        v_CHG_IDX AS CHG_IDX,
		        A.KPI_IDX,
		        A.ESSNTL_SE,
		        A.KPI_CN,
		        A.KPI_GOAL,
		        A.REGI_IDX,
		        A.REGI_ID,
		        A.REGI_NAME,
		        A.REGI_DATE,
		        A.REGI_IP,
		        A.LAST_MODI_IDX,
		        A.LAST_MODI_ID,
		        A.LAST_MODI_NAME,
		        A.LAST_MODI_DATE,
		        A.LAST_MODI_IP
		        FROM HRD_CLI_PLAN_KPI A
		        WHERE 
		            CLI_IDX = v_CLI_IDX
		        AND PLAN_IDX = v_PLAN_IDX;
		        
		        /*HRD_CLI_PLAN_CORP_PIC TO HRD_CLI_PLAN_CHANGE_CORP_PIC*/
		        INSERT INTO HRD_CLI_PLAN_CHANGE_CORP_PIC
		        SELECT A.CLI_IDX,
		        A.PLAN_IDX,
		        v_CHG_IDX AS CHG_IDX,
		        A.PIC_IDX,
		        A.PIC_NM,
		        A.DEPT_NAME,
		        A.OFCPS,
		        A.HFFC_CAREER,
		        A.TELNO,
		        A.EMAIL,
		        A.REGI_IDX,
		        A.REGI_ID,
		        A.REGI_NAME,
		        A.REGI_DATE,
		        A.REGI_IP,
		        A.LAST_MODI_IDX,
		        A.LAST_MODI_ID,
		        A.LAST_MODI_NAME,
		        A.LAST_MODI_DATE,
		        A.LAST_MODI_IP
		        FROM HRD_CLI_PLAN_CORP_PIC A
		        WHERE 
		            CLI_IDX = v_CLI_IDX
		        AND PLAN_IDX = v_PLAN_IDX;
		        COMMIT;
		    END
		}
	</update>
			
	<!-- 훈련계획서 변경 승인시 PLAN_CHANGE의 마지막 로우를 PLAN테이블로 일괄 업데이트 한다-->
	<update id="ChangeToPlan" parameterType="java.util.HashMap">
		{call
           DECLARE
                v_CHG_IDX NUMBER;
		        v_CLI_IDX NUMBER;
		        v_PLAN_IDX NUMBER;
                
                
                CURSOR 
                    PLAN_CHANGE
                IS
                    SELECT * 
                    FROM HRD_CLI_PLAN_CHANGE
                    WHERE PLAN_IDX = #{PLAN_IDX}
                     AND  CLI_IDX = #{CLI_IDX}
                     AND  CHG_IDX = #{CHG_IDX};
                 
                CURSOR
                    PLAN_CHANGE_CORP_PIC
                IS
                    SELECT *
                    FROM HRD_CLI_PLAN_CHANGE_CORP_PIC
                    WHERE PLAN_IDX = #{PLAN_IDX}
                     AND  CLI_IDX = #{CLI_IDX}
                     AND  CHG_IDX = #{CHG_IDX};
                 
                CURSOR
                    PLAN_CHANGE_KPI
                IS
                    SELECT *
                    FROM HRD_CLI_PLAN_CHANGE_KPI
                    WHERE PLAN_IDX = #{PLAN_IDX}
                     AND  CLI_IDX = #{CLI_IDX}
                     AND  CHG_IDX = #{CHG_IDX};
                 
                CURSOR
                    PLAN_CHANGE_SUB
                IS
                    SELECT *
                    FROM HRD_CLI_PLAN_CHANGE_SUB
                    WHERE PLAN_IDX = #{PLAN_IDX}
                     AND  CLI_IDX = #{CLI_IDX}
                     AND  CHG_IDX = #{CHG_IDX};
                 
                CURSOR
                    PLAN_CHANGE_TR_SUB
                IS
                    SELECT *
                    FROM HRD_CLI_PLAN_CHANGE_TR_SUB
                    WHERE PLAN_IDX = #{PLAN_IDX}
                     AND  CLI_IDX = #{CLI_IDX}
                     AND  CHG_IDX = #{CHG_IDX};                 
                
            BEGIN
                                             
            	FOR CUR IN PLAN_CHANGE LOOP
	                UPDATE HRD_CLI_PLAN SET
	                    PLAN_NM = CUR.PLAN_NM,
	                    HRD_PIC_ABLTDEVLP_PLAN = CUR.HRD_PIC_ABLTDEVLP_PLAN,
	                    SLFTR_PLAN = CUR.SLFTR_PLAN,
	                    FYER_TR_PLAN_TR_DTY = CUR.FYER_TR_PLAN_TR_DTY,
	                    GVRN_SPORT_CRSE_CO = CUR.GVRN_SPORT_CRSE_CO,
	                    GVRN_UN_SPORT_CRSE_CO = CUR.GVRN_UN_SPORT_CRSE_CO,
	                    SLFTR_SFDGSPSCDG_OPRPRENGER_CO = CUR.SLFTR_SFDGSPSCDG_OPRPRENGER_CO,
	                    SLFTR_SFDGSPSCDG_OPRCRSE_CO = CUR.SLFTR_SFDGSPSCDG_OPRCRSE_CO,
	                    SLFTR_SPAPPLCDG_OPRREARNGER_CO = CUR.SLFTR_SPAPPLCDG_OPRREARNGER_CO,
	                    SLFTR_SPAPPLCDG_OPRCRSE_CO = CUR.SLFTR_SPAPPLCDG_OPRCRSE_CO,
	                    CONFM_STATUS = CUR.CONFM_STATUS,
	                    DOCTOR_OPINION = CUR.DOCTOR_OPINION,
	                    ISDELETE = CUR.ISDELETE,
	                    REGI_IDX = CUR.REGI_IDX,
	                    REGI_ID = CUR.REGI_ID,
	                    REGI_NAME = CUR.REGI_NAME,
	                    REGI_DATE = CUR.REGI_DATE,
	                    REGI_IP = CUR.REGI_IP,
	                    LAST_MODI_IDX = CUR.LAST_MODI_IDX,
	                    LAST_MODI_ID = CUR.LAST_MODI_ID,
	                    LAST_MODI_NAME = CUR.LAST_MODI_NAME,
	                    LAST_MODI_DATE = CUR.LAST_MODI_DATE,
	                    LAST_MODI_IP = CUR.LAST_MODI_IP
	                WHERE 
	                	CLI_IDX = #{CLI_IDX}
	                  AND PLAN_IDX = #{PLAN_IDX};
                 END LOOP;


                DELETE FROM 
                    HRD_CLI_PLAN_CORP_PIC
                WHERE PLAN_IDX = #{PLAN_IDX}
                 AND  CLI_IDX = #{CLI_IDX};                  

                FOR CUR IN PLAN_CHANGE_CORP_PIC LOOP                
                    
                    INSERT INTO 
                    HRD_CLI_PLAN_CORP_PIC (
                        CLI_IDX,      PLAN_IDX,         PIC_IDX,       PIC_NM,
                        DEPT_NAME,      OFCPS,          HFFC_CAREER,   TELNO,
                        EMAIL,          REGI_IDX,       REGI_ID,       REGI_NAME,
                        REGI_DATE,      REGI_IP,        LAST_MODI_IDX, LAST_MODI_ID,
                        LAST_MODI_NAME, LAST_MODI_DATE, LAST_MODI_IP
                        )VALUES(
                        #{CLI_IDX},         #{PLAN_IDX},        CUR.PIC_IDX,       CUR.PIC_NM,
                        CUR.DEPT_NAME,      CUR.OFCPS,          CUR.HFFC_CAREER,   CUR.TELNO,
                        CUR.EMAIL,          CUR.REGI_IDX,       CUR.REGI_ID,       CUR.REGI_NAME,
                        CUR.REGI_DATE,      CUR.REGI_IP,        CUR.LAST_MODI_IDX, CUR.LAST_MODI_ID,
                        CUR.LAST_MODI_NAME, CUR.LAST_MODI_DATE, CUR.LAST_MODI_IP
                        );
                 END LOOP;
                 
                 
                DELETE FROM 
                    HRD_CLI_PLAN_KPI
                WHERE PLAN_IDX = #{PLAN_IDX}
                 AND  CLI_IDX = #{CLI_IDX}; 
                 
                 FOR CUR IN PLAN_CHANGE_KPI LOOP               
                    INSERT INTO 
                    HRD_CLI_PLAN_KPI (
                        CLI_IDX,      PLAN_IDX,       KPI_IDX,        ESSNTL_SE,
                        KPI_CN,       KPI_GOAL,       REGI_IDX,       REGI_ID,
                        REGI_NAME,    REGI_DATE,      REGI_IP,        LAST_MODI_IDX,
                        LAST_MODI_ID, LAST_MODI_NAME, LAST_MODI_DATE, LAST_MODI_IP
                        )VALUES(
                        #{CLI_IDX},       #{PLAN_IDX},        CUR.KPI_IDX,        CUR.ESSNTL_SE,
                        CUR.KPI_CN,       CUR.KPI_GOAL,       CUR.REGI_IDX,       CUR.REGI_ID,
                        CUR.REGI_NAME,    CUR.REGI_DATE,      CUR.REGI_IP,        CUR.LAST_MODI_IDX,
                        CUR.LAST_MODI_ID, CUR.LAST_MODI_NAME, CUR.LAST_MODI_DATE, CUR.LAST_MODI_IP
                        );                 
                 END LOOP;
                 
                
                DELETE FROM 
                    HRD_CLI_PLAN_SUB
                WHERE PLAN_IDX = #{PLAN_IDX}
                 AND  CLI_IDX = #{CLI_IDX};       
                 
                 FOR CUR IN PLAN_CHANGE_SUB LOOP                 
                    INSERT INTO 
                    HRD_CLI_PLAN_SUB (
                        CLI_IDX,       PLAN_IDX,     SPORT_ITEM_CD,  ESSNTL_SE,
                        REQST_YN,      PLAN_CN,      ISDELETE,       REGI_IDX,
                        REGI_ID,       REGI_NAME,    REGI_DATE,      REGI_IP,
                        LAST_MODI_IDX, LAST_MODI_ID, LAST_MODI_NAME, LAST_MODI_DATE, 
                        LAST_MODI_IP
                        )VALUES(
                        #{CLI_IDX},        #{PLAN_IDX},      CUR.SPORT_ITEM_CD,  CUR.ESSNTL_SE,
                        CUR.REQST_YN,      CUR.PLAN_CN,      CUR.ISDELETE,       CUR.REGI_IDX,
                        CUR.REGI_ID,       CUR.REGI_NAME,    CUR.REGI_DATE,      CUR.REGI_IP,
                        CUR.LAST_MODI_IDX, CUR.LAST_MODI_ID, CUR.LAST_MODI_NAME, CUR.LAST_MODI_DATE,
                        CUR.LAST_MODI_IP
                        );                                     
                 END LOOP;
                 
                                  
                 DELETE FROM 
                    HRD_CLI_PLAN_TR_SUB
                WHERE PLAN_IDX = #{PLAN_IDX}
                 AND  CLI_IDX = #{CLI_IDX};                  

                FOR CUR IN PLAN_CHANGE_TR_SUB LOOP
                    INSERT INTO 
                    HRD_CLI_PLAN_TR_SUB (
                        CLI_IDX,        PLAN_IDX,       TR_DTL_IDX,    TR_MT,
                        TR_TRGET,       TR_CN,          TR_MBY,        TR_MTH,
                        TRINSTT_NM,     TR_NMPR,        TRTM,          GVRN_SPORT_YN,
                        REMARKS,        REGI_IDX,       REGI_ID,       REGI_NAME,
                        REGI_DATE,      REGI_IP,        LAST_MODI_IDX, LAST_MODI_ID,
                        LAST_MODI_NAME, LAST_MODI_DATE, LAST_MODI_IP
                        )VALUES(
                        #{CLI_IDX},         #{PLAN_IDX},        CUR.TR_DTL_IDX,    CUR.TR_MT,
                        CUR.TR_TRGET,       CUR.TR_CN,          CUR.TR_MBY,        CUR.TR_MTH,
                        CUR.TRINSTT_NM,     CUR.TR_NMPR,        CUR.TRTM,          CUR.GVRN_SPORT_YN,
                        CUR.REMARKS,        CUR.REGI_IDX,       CUR.REGI_ID,       CUR.REGI_NAME,
                        CUR.REGI_DATE,      CUR.REGI_IP,        CUR.LAST_MODI_IDX, CUR.LAST_MODI_ID,
                        CUR.LAST_MODI_NAME, CUR.LAST_MODI_DATE, CUR.LAST_MODI_IP
                        );                                  
                

                END LOOP;
		        COMMIT;
		      END
              
		}
	</update>		
	
	
	<!-- 연차별 클리닉 기업 수 리스트 가져오기(본부 - 전체 지부지사 / 지부지사 부장 - 본인 소속기관 전체 / 지부지사 주치의 - 본인이 전담주치의인 기업) -->
	<select id="getAllCliCorpCountList" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT 
			SUM((TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)) as ALLCNT,
	        (TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY')) + 1 AS YEARLY ,
	        COUNT((TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)) AS YEARLYCOUNT 
		FROM HRD_CLI A, HRD_CLI_REQ B
		WHERE 
			A.CLI_IDX = B.CLI_IDX
			AND A.VALID_START_DATE IS NOT NULL
			AND TO_DATE(A.VALID_END_DATE,'YYYYMMDD') <![CDATA[>=]]> SYSDATE
			AND A.ISDELETE = '0'
			AND B.CONFM_STATUS = '55'
		<if test='all != "Y"'>
			AND A.CLI_INSTT_IDX = #{INSTT_IDX} 
		</if>		
		 GROUP BY (TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)
	</select>
	
	<!-- 연차별 나의 클리닉 기업 수 리스트 가져오기(지부지사 부장, 지부지사 주치의만 사용) -->
	<select id="getMyCliCorpCountList" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT 
			SUM((TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)) as ALLCNT,
	        (TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY')) + 1 AS YEARLY ,
	        COUNT((TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)) AS YEARLYCOUNT 
		FROM HRD_CLI A, HRD_CLI_REQ B
		WHERE 
			A.CLI_IDX = B.CLI_IDX
			AND A.VALID_START_DATE IS NOT NULL
			AND TO_DATE(A.VALID_END_DATE,'YYYYMMDD') <![CDATA[>=]]> SYSDATE
			AND A.ISDELETE = '0'
			AND B.CONFM_STATUS = '55'
			AND A.DOCTOR_IDX = #{DOCTOR_IDX}
		 GROUP BY (TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)
	</select>
	
	<!-- 연차별 중도포기한 클리닉 기업 수 리스트 가져오기(본부 - 전체 지부지사 / 지부지사 부장 - 본인 소속기관 전체 / 지부지사 주치의 - 본인이 전담주치의인 기업) -->
	<select id="getAllDropCliCorpCountList" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT 
			SUM((TO_CHAR(A.LAST_MODI_DATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)) as ALLCNT,
	        (TO_CHAR(A.LAST_MODI_DATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY')) + 1 AS YEARLY ,
	        COUNT((TO_CHAR(A.LAST_MODI_DATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)) AS YEARLYCOUNT 
		FROM HRD_CLI A
		WHERE 
			A.VALID_START_DATE IS NOT NULL
			AND TO_DATE(A.VALID_END_DATE,'YYYYMMDD') <![CDATA[>=]]> SYSDATE
			AND A.ISDELETE = '1'
		<if test='all != "Y"'>
			AND A.CLI_INSTT_IDX = #{INSTT_IDX} 
		</if>		
		 GROUP BY (TO_CHAR(A.LAST_MODI_DATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)
	</select>
	
	<!-- 연차별 중도포기한 나의 클리닉 기업 수 리스트 가져오기(지부지사 부장, 지부지사 주치의만 사용) -->
	<select id="getMyDropCliCorpCountList" parameterType="java.util.HashMap" resultType="dataMap">
		SELECT 
			SUM((TO_CHAR(A.LAST_MODI_DATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)) as ALLCNT,
	        (TO_CHAR(A.LAST_MODI_DATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY')) + 1 AS YEARLY ,
	        COUNT((TO_CHAR(A.LAST_MODI_DATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)) AS YEARLYCOUNT 
		FROM HRD_CLI A
		WHERE 
			A.VALID_START_DATE IS NOT NULL
			AND TO_DATE(A.VALID_END_DATE,'YYYYMMDD') <![CDATA[>=]]> SYSDATE
			AND A.ISDELETE = '1'
			AND A.DOCTOR_IDX = #{DOCTOR_IDX}
		 GROUP BY (TO_CHAR(A.LAST_MODI_DATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1)
	</select>
	
	
	<select id="getCliCorpCount" parameterType="java.util.HashMap" resultType="java.lang.Integer">
		SELECT COUNT(*) 
        FROM HRD_CLI A, HRD_CLI_REQ B
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
			AND A.CLI_IDX = B.CLI_IDX
		<if test="YEAR != null">
			AND (TO_CHAR(SYSDATE,'YYYY') - SUBSTR(A.VALID_START_DATE, 0, 4) + 1) = #{YEAR}
		</if>
		 	AND A.VALID_START_DATE IS NOT NULL
		 	AND A.CLI_IDX = B.CLI_IDX
		 	AND TO_DATE(A.VALID_END_DATE,'YYYYMMDD') <![CDATA[>=]]> SYSDATE
			AND B.CONFM_STATUS = '55'
		<if test='all != "Y"'>
			<if test='clsfCd == "Y"'>
				AND A.CLI_INSTT_IDX = #{INSTT_IDX} 
			</if>
			<if test='clsfCd != "Y"'>
				AND A.DOCTOR_IDX = #{DOCTOR_IDX} 
			</if>		 
		</if>
	</select>
	
	<!-- 클리닉 기업 리스트 가져오기 -->
	<select id="getCliCorpList" parameterType="java.util.HashMap" resultType="dataMap">
		<include refid="rbs.commonDBMSMapper.PAGING_TOP"/>
		SELECT A.BPL_NO, 
      			(SELECT BPL_NM FROM HRD_BSK WHERE BPL_NO = A.BPL_NO) AS BPL_NM, 
       			FN_GET_DOCTOR_NAME(A.DOCTOR_IDX) AS DOCTOR_NAME,
       			TO_CHAR(SYSDATE,'YYYY') - TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY') + 1 AS YEARLY,
       			TO_CHAR(TO_DATE(A.VALID_START_DATE,'YYYYMMDD'),'YYYY-MM-DD') AS VALID_YEAR       
        FROM HRD_CLI A, HRD_CLI_REQ B
		<include refid="rbs.commonMapper.SELECT_DF_WHERE"/>
		<if test="YEAR != null">
			AND (TO_CHAR(SYSDATE,'YYYY') - SUBSTR(A.VALID_START_DATE, 0, 4) + 1) = #{YEAR}
		</if>
		 	AND A.VALID_START_DATE IS NOT NULL
		 	AND A.CLI_IDX = B.CLI_IDX
		 	AND TO_DATE(A.VALID_END_DATE,'YYYYMMDD') <![CDATA[>=]]> SYSDATE
			AND B.CONFM_STATUS = '55'
		<if test='all != "Y"'>
			<if test='clsfCd == "Y"'>
				AND A.CLI_INSTT_IDX = #{INSTT_IDX} 
			</if>
			<if test='clsfCd != "Y"'>
				AND A.DOCTOR_IDX = #{DOCTOR_IDX} 
			</if>		 
		</if>
		<include refid="rbs.commonDBMSMapper.PAGING_BOTTOM"/>
	</select>
</mapper>            